<?xml version="1.0" encoding="UTF-8"?>
<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="true">
    <!-- 定义日志的根目录 -->
    <property name="LOG_PATH" value="./log"/>
    <!-- 定义日志文件名称 -->
    <property name="LOG_FILE" value="system_log"/>
    <!--定义日志格式-->
    <property name="ENCODER_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss}] [%-16thread] %5p [%-27logger{10}:%L] --> %m%n"/>

    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder charset="UTF-8">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
        </filter>
    </appender>

    <appender name="rollingLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--按照日期、文件大小拆分-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/${LOG_FILE}-%d{yyyy-MM-dd}-%i.log</fileNamePattern>
            <maxHistory>500</maxHistory>
            <maxFileSize>100MB</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>

        <encoder>
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
    </appender>

    <!--
    logger主要用于存放日志对象，也可以定义日志类型、级别
    name：表示匹配的logger类型前缀，也就是包的前半部分
    level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
    additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，false：表示只用当前logger的appender-ref，true：表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->

    <!-- Spring framework logger -->
    <logger name="org.springframework" level="error" additivity="false"/>

    <!--systemLog-->
    <logger name="team.sjfw.monitoringSystem.log" level="info" additivity="false">
        <appender-ref ref="stdout"/>
        <appender-ref ref="rollingLog"/>
    </logger>

    <!--
    root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
    要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->
    <root level="info">
        <!--<appender-ref ref="stdout" />-->
        <!--<appender-ref ref="appLogAppender" />-->
    </root>
</configuration>